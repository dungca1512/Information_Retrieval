[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.9 (Oracle Corporation Java 11.0.21)
[debug] Load.defaultLoad until apply took 2.1261ms
[debug]                 Load.loadUnit: plugins took 19.9888ms
[debug]                 Load.loadUnit: defsScala took 0.0018ms
[debug] [Loading] Scanning directory D:\Information_Retrieval\project\project
[debug]                   Load.loadUnit: mkEval took 0.2929ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\Information_Retrieval\project\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 0.5381 ms
[info] loading settings for project information_retrieval-build-build from metals.sbt ...
[debug]                     Load.resolveProject(information_retrieval-build-build) took 0.9309ms
[debug]                   Load.loadTransitive: finalizeProject(Project(id information_retrieval-build-build, base: D:\Information_Retrieval\project\project, plugins: List(<none>))) took 1.6769ms
[debug] [Loading] Done in D:\Information_Retrieval\project\project, returning: (information_retrieval-build-build)
[debug]                 Load.loadUnit: loadedProjectsRaw took 15.2903ms
[debug]                 Load.loadUnit: cleanEvalClasses took 0.748ms
[debug]               Load.loadUnit(file:/D:/Information_Retrieval/project/project/, ...) took 36.4873ms
[debug]             Load.apply: load took 37.1188ms
[debug]             Load.apply: resolveProjects took 0.072ms
[debug]             Load.apply: finalTransforms took 3.231ms
[debug]             Load.apply: config.delegates took 0.1384ms
[debug]             Load.apply: Def.make(settings)... took 21.5747ms
[debug]             Load.apply: structureIndex took 7.4065ms
[debug]             Load.apply: mkStreams took 0.0023ms
[info] loading project definition from D:\Information_Retrieval\project\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]           Load.loadUnit: plugins took 138.5178ms
[debug]           Load.loadUnit: defsScala took 0.0019ms
[debug] [Loading] Scanning directory D:\Information_Retrieval\project
[debug]             Load.loadUnit: mkEval took 0.2677ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\Information_Retrieval\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(bloop.integrations.sbt.BloopPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(bloop.integrations.sbt.BloopPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,bloop.integrations.sbt.BloopPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 0.5472 ms
[info] loading settings for project information_retrieval-build from metals.sbt,idea1.sbt ...
[debug]               Load.resolveProject(information_retrieval-build) took 16.4677ms
[debug]             Load.loadTransitive: finalizeProject(Project(id information_retrieval-build, base: D:\Information_Retrieval\project, plugins: List(<none>))) took 17.2309ms
[debug] [Loading] Done in D:\Information_Retrieval\project, returning: (information_retrieval-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 41.6947ms
[debug]           Load.loadUnit: cleanEvalClasses took 0.8267ms
[debug]         Load.loadUnit(file:/D:/Information_Retrieval/project/, ...) took 181.3539ms
[debug]       Load.apply: load took 181.9615ms
[debug]       Load.apply: resolveProjects took 0.0547ms
[debug]       Load.apply: finalTransforms took 6.7906ms
[debug]       Load.apply: config.delegates took 0.1356ms
[debug]       Load.apply: Def.make(settings)... took 32.9804ms
[debug]       Load.apply: structureIndex took 8.613ms
[debug]       Load.apply: mkStreams took 0.003ms
[info] loading project definition from D:\Information_Retrieval\project
[debug] Evaluating tasks: bloopInstall
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[success] Generated .bloop\information_retrieval-build.json
[success] Total time: 1 s, completed Apr 11, 2024, 2:18:05 PM
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 1234.5697ms
[debug]     Load.loadUnit: defsScala took 0.0023ms
[debug] [Loading] Scanning directory D:\Information_Retrieval
[debug]       Load.loadUnit: mkEval took 0.4028ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(bloop.integrations.sbt.BloopPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(bloop.integrations.sbt.BloopPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,bloop.integrations.sbt.BloopPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.1728 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 38.5047ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: D:\Information_Retrieval, plugins: List(<none>))) took 40.0594ms
[debug] [Loading] Done in D:\Information_Retrieval, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 808.8891ms
[debug]     Load.loadUnit: cleanEvalClasses took 4.5518ms
[debug]   Load.loadUnit(file:/D:/Information_Retrieval/, ...) took 2048.2619ms
[debug] Load.apply: load took 2048.9073ms
[debug] Load.apply: resolveProjects took 0.0552ms
[debug] Load.apply: finalTransforms took 13.1222ms
[debug] Load.apply: config.delegates took 0.4761ms
[debug] Load.apply: Def.make(settings)... took 31.4327ms
[debug] Load.apply: structureIndex took 8.7483ms
[debug] Load.apply: mkStreams took 0.0025ms
[info] set current project to Information_Retrieval (in build file:/D:/Information_Retrieval/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(idea-shell, None, None)
